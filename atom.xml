<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>群馬大学電子計算機研究会 IGGG</title>
  
  <subtitle>Information technology researching society&lt;/p&gt;&lt;p&gt; of the Gunmer,&lt;/p&gt;&lt;p&gt; by the Gunmer,&lt;/p&gt;&lt;p&gt; for the Gunmer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://iggg.github.io/"/>
  <updated>2019-12-17T10:56:32.102Z</updated>
  <id>https://iggg.github.io/</id>
  
  <author>
    <name>IGGG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitHub Actions でブログの更新をツイートする</title>
    <link href="https://iggg.github.io/2019/11/03/tweet-by-gh-actions/"/>
    <id>https://iggg.github.io/2019/11/03/tweet-by-gh-actions/</id>
    <published>2019-11-03T01:00:00.000Z</published>
    <updated>2019-12-17T10:56:32.102Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/tweet-by-gh-actions/ikisatsu.jpg" alt></p><p>面白そうだったので先に作っちゃいました。<br><a href="https://iggg.github.io/2019/10/11/use-github-actions">GitHub Actions 自体はすでに導入した</a>ので、あとは Tweet をできるようにするだけです。</p><h2 id="ツイートメッセージを組み立てる"><a href="#ツイートメッセージを組み立てる" class="headerlink" title="ツイートメッセージを組み立てる"></a>ツイートメッセージを組み立てる</h2><p>こういう感じにツイートしたい:</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">【ブログを更新しました】libnss-json 始めました <a href="https://t.co/M6g35h7vuj" target="_blank" rel="noopener">https://t.co/M6g35h7vuj</a></p>&mdash; IGGG(群馬大学電子計算機研究会) (@IGGGorg) <a href="https://twitter.com/IGGGorg/status/1176865665635930112?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 25, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>このためには</p><ol><li>記事のタイトル</li><li>記事のリンク</li></ol><p>が必要ですね。これらを git の差分などから構築するために THE シェル芸します。</p><p>ブログは Hexo で作っており、記事は <code>source/_posts/hoge.md</code> に追加します。最終的なリンクは <code>[base_url]/YYYY/MM/DD/hoge</code> となるので、リンクを得るには日付の情報とファイル名が必要です。</p><p>マークダウンには front matter でタイトルや日付が書いてあります:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: GitHub Actions を使ってみた</span><br><span class="line">date: 2019-10-11 00:00:00</span><br><span class="line">tags:</span><br><span class="line">  - GitHub</span><br><span class="line">categories: Web</span><br><span class="line">cover: "/images/use-github-actions/actions.jpg"</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">IGGG ソフトウェア基盤部のひげです。</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>これをよしなにパースします:</p><ol><li>更新の有無: <code>git diff fdd0928^...fdd0928 --name-only --diff-filter=A -- source/_posts/*.md</code></li><li>(1) のファイルパス <code>path/to/file</code> からタイトル取得: <code>head path/to/file | grep &#39;^title:&#39; | sed &#39;s/^title: *//g&#39;</code></li><li>(1) のファイルパスから日付を取得: <code>head path/to/file | grep &#39;^date:&#39; | sed -e &#39;s/^date: *\([0-9]\{4\}\)-\([0-9]\{2\}\)-\([0-9]\{2\}\) .*$/\1\/\2\/\3/g&#39;</code></li><li>(1) のファイルパスから拡張子抜きのファイル名を取得: <code>echo path/to/file | sed -e &#39;s/source\/_posts\/\(.*\)\.md/\1/&#39;</code></li><li>(3) の日付と (5) のファイル名から URL を取得: <code>echo &quot;https://iggg,github.io/${date}/${file_name}&quot;</code></li></ol><p>これらをするシェルスクリプトがこちら:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BASE_URL=<span class="string">"https://iggg.github.io"</span></span><br><span class="line">TWEET_MESSAGE=<span class="string">""</span></span><br><span class="line">LATEST=0</span><br><span class="line"></span><br><span class="line">DIFF_FILES=`git diff <span class="variable">$&#123;TARGET_BRANCH&#125;</span> --name-only --diff-filter=A -- <span class="built_in">source</span>/_posts/*.md`</span><br><span class="line"><span class="keyword">for</span> FILE_PATH <span class="keyword">in</span> <span class="variable">$DIFF_FILES</span> ; <span class="keyword">do</span></span><br><span class="line">  TITLE=`head <span class="variable">$&#123;FILE_PATH&#125;</span> | grep <span class="string">'^title:'</span> | sed <span class="string">'s/^title: *//g'</span>`</span><br><span class="line">  DATE=`head <span class="variable">$&#123;FILE_PATH&#125;</span> | grep <span class="string">'^date:'</span> | sed -e <span class="string">'s/^date: *\([0-9]\&#123;4\&#125;\)-\([0-9]\&#123;2\&#125;\)-\([0-9]\&#123;2\&#125;\) .*$/\1\/\2\/\3/g'</span>`</span><br><span class="line">  FILE_NAME=`<span class="built_in">echo</span> <span class="variable">$&#123;FILE_PATH&#125;</span> | sed -e <span class="string">'s/source\/_posts\/\(.*\)\.md/\1/'</span>`</span><br><span class="line">  MESSAGE=<span class="string">"<span class="variable">$&#123;TITLE&#125;</span> <span class="variable">$&#123;BASE_URL&#125;</span>/<span class="variable">$&#123;DATE&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">  DATE_TIME=`date -d <span class="string">"<span class="variable">$&#123;DATE&#125;</span>"</span> <span class="string">'+%s'</span>`</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$DATE_TIME</span> -gt <span class="variable">$LATEST</span> ] ; <span class="keyword">then</span></span><br><span class="line">    TWEET_MESSAGE=<span class="string">"【ブログを更新しました】<span class="variable">$&#123;MESSAGE&#125;</span>"</span></span><br><span class="line">    LATEST=<span class="variable">$&#123;DATE_TIME&#125;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;TWEET_MESSAGE&#125;</span></span><br></pre></td></tr></table></figure><p><code>TARGET_BRANCH</code> だけ外から与えます。ループしているのは、(1) で複数投稿があった場合に最新のものだけを拾うためです。</p><h2 id="ツイートする"><a href="#ツイートする" class="headerlink" title="ツイートする"></a>ツイートする</h2><p>最初は curl で API でも叩けばいいかなぁって思ってたけど Twitter API は意外とめんどい。そこでひらめく、せっかく GitHub Actions だし、アクションを使えばいいんだと(天才)。</p><p>ググってもなさそうだったので作りました:</p><ul><li><a href="https://github.com/matsubara0507/actions/tree/master/tweet" target="_blank" rel="noopener">actions/tweet at master · matsubara0507/actions</a></li></ul><p>Python の <a href="https://www.tweepy.org/" target="_blank" rel="noopener"><code>tweepy</code></a> を使っています。理由は (1) スクリプト系の言語で (2) 扱いが簡単(クライアントオブジェクト生成してメソッド叩くだけ)で (3) 今でもメンテナンスされているのがちょうどこれだったからです(Ruby の <a href="https://rubygems.org/gems/twitter" target="_blank" rel="noopener"><code>twitter</code></a> gem は2017から更新止まってた)。</p><p>使い方はこんな感じ:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">uses:</span> <span class="string">matsubara0507/actions/tweet@master</span></span><br><span class="line"><span class="attr">with:</span></span><br><span class="line"><span class="attr">  consumer_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TWITTER_CONSUMER_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  consumer_secret:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TWITTER_CONSUMER_SECRET</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  access_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TWITTER_ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  access_token_secret:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TWITTER_ACCESS_TOKEN_SECRET</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">'This is test tweet by GitHub Actions'</span></span><br></pre></td></tr></table></figure><p>ここで問題が1つ。どうやってさっき生成したツイートメッセージを <code>with.message</code> に渡すか。<br>ここで、なんかしらのコマンドの実行を与えることはどうやらできないっぽい:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">Build</span> <span class="string">tweet</span> <span class="string">message</span></span><br><span class="line">  <span class="comment"># この結果を</span></span><br><span class="line"><span class="attr">  run:</span> <span class="string">./.github/scripts/tweet-message.bash</span></span><br><span class="line"><span class="attr">  shell:</span> <span class="string">bash</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Tweet</span></span><br><span class="line"><span class="attr">  uses:</span> <span class="string">matsubara0507/actions/tweet@master</span></span><br><span class="line"><span class="attr">  with:</span></span><br><span class="line"><span class="attr">    message:</span> <span class="comment"># ここに与えたい</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><p>この位置で変数を使うには <code>steps.[step_id].outputs.hoge</code> を作る必要がある。<br>しかし、これはアクション側で事前に設定するもの(少なくとも現在は)で、独自で定義することはできない:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># こう言うのができれば良いのに</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Build</span> <span class="string">tweet</span> <span class="string">message</span></span><br><span class="line"><span class="attr">  id:</span> <span class="string">message</span></span><br><span class="line"><span class="attr">  run:</span> <span class="string">./.github/scripts/tweet-message.bash</span></span><br><span class="line"><span class="attr">  shell:</span> <span class="string">bash</span></span><br><span class="line"><span class="attr">  output:</span> <span class="string">result</span> <span class="comment"># こんな構文は無い</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Tweet</span></span><br><span class="line"><span class="attr">  uses:</span> <span class="string">matsubara0507/actions/tweet@master</span></span><br><span class="line"><span class="attr">  with:</span></span><br><span class="line"><span class="attr">    message:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.message.outputs.result</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><p>だったら、なんかスクリプト実行してその出力を outputs に退避させるアクションを使えばいいんだと(天才)。<br>はい、ググってなさそうだったんで、ないなら作る精神:</p><ul><li><a href="https://github.com/matsubara0507/actions/tree/master/outputs" target="_blank" rel="noopener">actions/outputs at master · matsubara0507/actions</a></li></ul><p>これを利用するとこんな感じでツイートできました:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  tweet:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-18.04</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">    - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Build</span> <span class="string">tweet</span> <span class="string">message</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">matsubara0507/actions/outputs@master</span></span><br><span class="line"><span class="attr">      id:</span> <span class="string">message</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="attr">        TARGET_BRANCH:</span> <span class="string">HEAD^</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        script_path:</span> <span class="string">./.github/scripts/tweet-message.bash</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Tweet</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">matsubara0507/actions/tweet@master</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        consumer_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TWITTER_CONSUMER_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        consumer_secret:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TWITTER_CONSUMER_SECRET</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        access_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TWITTER_ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        access_token_secret:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TWITTER_ACCESS_TOKEN_SECRET</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        message:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.message.outputs.result</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="おまけ-アクションの作り方"><a href="#おまけ-アクションの作り方" class="headerlink" title="おまけ: アクションの作り方"></a>おまけ: アクションの作り方</h2><p>作り方は2つあります。JavaScript (TypeScript) を使う方法と Docker を使う方法。</p><table><thead><tr><th align="center"></th><th align="center">JavaScript</th><th align="center">Docker</th></tr></thead><tbody><tr><td align="center">仮想環境</td><td align="center">Linux, MacOS, Windows</td><td align="center">Linux</td></tr><tr><td align="center">起動速度</td><td align="center">速い</td><td align="center">遅い(pull or build)</td></tr><tr><td align="center">依存関係</td><td align="center">前後に影響(たぶん)</td><td align="center">アクションで独立</td></tr></tbody></table><p>Docker の方が簡単ですが、JavaScript は次のステップにも影響を与えることができます。<br>ちなみに、<code>outputs</code> アクションは JavaScript で、<code>tweet</code> アクションは Docker で作りました。</p><p>両方とも、GitHub リポジトリにあげておけば直接利用できます。</p><h3 id="JavaScript-の場合"><a href="#JavaScript-の場合" class="headerlink" title="JavaScript の場合"></a>JavaScript の場合</h3><ul><li><a href="https://help.github.com/en/github/automating-your-workflow-with-github-actions/creating-a-javascript-action" target="_blank" rel="noopener">ココを見て</a></li><li>アクションのプリミティブなやつはだいたい <a href="https://github.com/actions/toolkit" target="_blank" rel="noopener">actions/toolkit</a> リポジトリにあります</li><li>使い方の例が TypeScript だったりするのが罠</li></ul><h3 id="Docker-の場合"><a href="#Docker-の場合" class="headerlink" title="Docker の場合"></a>Docker の場合</h3><ul><li><a href="https://help.github.com/en/github/automating-your-workflow-with-github-actions/creating-a-docker-container-action" target="_blank" rel="noopener">ココを見て</a></li><li>GitHub リポジトリの場合は <code>docker build</code></li><li>レジストリにあげると <code>docker pull</code></li></ul><h2 id="おしまい"><a href="#おしまい" class="headerlink" title="おしまい"></a>おしまい</h2><p>GitHub Actions は、いよいよ 11/13 に GA されるんで楽しみです！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/tweet-by-gh-actions/ikisatsu.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;面白そうだったので先に作っちゃいました。&lt;br&gt;&lt;a href=&quot;https://iggg.github.io/2019/10/11/use-gi
      
    
    </summary>
    
    
      <category term="Web" scheme="https://iggg.github.io/categories/Web/"/>
    
    
      <category term="GitHub" scheme="https://iggg.github.io/tags/GitHub/"/>
    
      <category term="JavaScript" scheme="https://iggg.github.io/tags/JavaScript/"/>
    
      <category term="Python" scheme="https://iggg.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>iggg.org を移行する その２</title>
    <link href="https://iggg.github.io/2019/10/13/replase-iggg-org-2/"/>
    <id>https://iggg.github.io/2019/10/13/replase-iggg-org-2/</id>
    <published>2019-10-13T11:00:00.000Z</published>
    <updated>2019-12-17T10:56:32.102Z</updated>
    
    <content type="html"><![CDATA[<p>これの続きです。</p><ul><li><a href="/2018/12/21/replace-iggg-org">iggg.org を移行する｜群馬大学電子計算機研究会 IGGG</a></li></ul><p>半年前…やりきりました。<br>実際に <a href="https://www.iggg.org" target="_blank" rel="noopener">iggg.org</a> はすでに新しくなっており、<a href="https://IGGG/new.iggg.org" target="_blank" rel="noopener">IGGG/new.iggg.org</a> というリポジトリで動いてます。</p><p><img src="/images/replace-iggg-org/new-iggg-org.jpg" alt></p><h2 id="前回からの残タスク"><a href="#前回からの残タスク" class="headerlink" title="前回からの残タスク"></a>前回からの残タスク</h2><p>やったのはこれ</p><ol><li>NEWSの記事の細かい修正</li><li>wiki の移行</li><li>コミットから自動生成</li><li>ドメインを iggg.org にする</li></ol><h2 id="1-NEWSの記事の細かい修正"><a href="#1-NEWSの記事の細かい修正" class="headerlink" title="1. NEWSの記事の細かい修正"></a>1. NEWSの記事の細かい修正</h2><p>鬼門その１。<br>いくつか古い記法が残っていました。</p><h3 id="埋め込み系"><a href="#埋め込み系" class="headerlink" title="埋め込み系"></a>埋め込み系</h3><p>まずは埋め込み系:</p><ul><li><a href="https://github.com/IGGG/new.iggg.org/commit/6fa930fcf125c3d370921bc985c8de72a07f080f" target="_blank" rel="noopener">スライド の埋め込み</a> (SlideShare)</li><li><a href="https://github.com/IGGG/new.iggg.org/commit/6e5552b94ce77eb81e90d0d9d277ce1c60e77ec2" target="_blank" rel="noopener">Twitter と YouTube の埋め込み</a></li></ul><p>ええ、この辺りは機械的にやりようがないので。。。</p><ol><li>問題の箇所がどこか grep</li><li>対応する旧ページを見に行く</li><li>Embed 記法を書き換える</li></ol><p>愚直です（たいした数がないのでいいんですけど）。</p><h3 id="画像"><a href="#画像" class="headerlink" title="画像"></a>画像</h3><p>そして次は画像。<br>記法の変換は大体できていたのが、サイズがめちゃくちゃデカイので <a href="https://github.com/IGGG/new.iggg.org/commit/e271fd2510d3e49082e60ada56eca556a143f58e" target="_blank" rel="noopener">Hugo のショートコードを設定して直した</a>:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; $src := .Get "src" &#125;&#125;</span><br><span class="line">&#123;&#123; $scale := float (default "1" (.Get "scale" )) &#125;&#125;</span><br><span class="line">&#123;&#123; $title := .Get "title" &#125;&#125;</span><br><span class="line">&#123;&#123; $config := imageConfig (printf "/static/%s" $src) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span> <span class="attr">style</span>=<span class="string">"margin: 1em"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; .Site.BaseURL | absLangURL &#125;&#125;&#123;&#123;$src&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">style</span>=<span class="string">"max-width: &#123;&#123;mul $config.Width $scale&#125;&#125;px"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">width</span>=<span class="string">"100%"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">alt</span>=<span class="string">"&#123;&#123;$title&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">title</span>=<span class="string">"&#123;&#123;$title&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>&#123;&#123;$title&#125;&#125;<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure><p>これを <code>layouts/shortcodes/img.html</code> に保存し、<code>{&lt; img src=&quot;/path/to/image&quot; scale=&quot;0.2&quot; title=&quot;タイトル&quot; &gt;}}</code> と書くことでサイズを指定したり、正しいパスに変換してくれたりしてくれる。<br>完璧だ。</p><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>旧ページと新ページでページの URL が変わってしまう。<br>旧はページのタイトルや設定した URL になってるのだが、対して新は日付の URL。<br>さて、どうするか。<br>alias の設定自体は Hugo のフロントマターで指定できます:</p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: "本会の活動拠点が決定しました！"</span><br><span class="line">date: 2014-06-16</span><br><span class="line">aliases:</span><br><span class="line"><span class="bullet">- </span>/news/base-was-decided</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">## 場所は…？</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>ではどうやって元の URL と新しい URL を対応させるか。<br><strong>根性です。</strong><br><a href="https://github.com/IGGG/new.iggg.org/commit/20016f3b0ce3c7055a6349a57b8a620fd1ba94a0" target="_blank" rel="noopener">根性しました</a>。</p><p><img src="/images/replace-iggg-org/tesagyo.jpg" alt="根性の様子"></p><h2 id="2-wiki-の移行"><a href="#2-wiki-の移行" class="headerlink" title="2. wiki の移行"></a>2. wiki の移行</h2><p>鬼門その２。<br>静的サイトはキッツイので代替の要件から考えた。</p><ul><li>ページは公開されていい</li><li>ユーザー登録は(多少)クローズド</li><li>マークダウンか何かでインポートできる</li></ul><p>以上を踏まえた結果 Scrapbox.io にしました:</p><ul><li><a href="https://scrapbox.io/iggg/" target="_blank" rel="noopener">IGGG - Scrapbox</a></li></ul><p>で、以降手順はこんな感じ</p><ol><li>PukiWiki のデータ全部抜く</li><li>PukiWiki から MD に変換</li><li>MD 内の wiki へのリンクを Scrapbox に差し替え</li><li>画像も Scrapbox にいい感じに</li><li>MD を Scrapbox にインポート</li></ol><h3 id="PukiWiki-のデータ全部抜く"><a href="#PukiWiki-のデータ全部抜く" class="headerlink" title="PukiWiki のデータ全部抜く"></a>PukiWiki のデータ全部抜く</h3><p>自分でセットアップしてないので、まずは PukiWiki のデータを探した:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls /srv/http/wiki/wiki-data/wiki/ | head</span><br><span class="line">32303137E5B9B4E5BAA620E381A1E381B3E381A3E5AD90E5A4A7E5ADA6.txt</span><br><span class="line">32303138E5B9B4E5BAA620E381A1E381B3E381A3E5AD90E5A4A7E5ADA6.txt</span><br><span class="line">32E3818BE38289E5A78BE381BEE3828BE695B4E695B0E58897.txt</span><br><span class="line">3A526563656E7444656C65746564.txt</span><br><span class="line">3A636F6E6669672F4261644265686176696F72.txt</span><br><span class="line">3A636F6E6669672F617574682F6F70656E69642F6D697869.txt</span><br><span class="line">3A636F6E6669672F6931386E2F746578742F6A615F4A50.txt</span><br><span class="line">3A636F6E6669672F706C7567696E2F6174746163682F6D696D652D74797065.txt</span><br><span class="line">3A636F6E6669672F706C7567696E2F63686172742F64656661756C74.txt</span><br><span class="line">3A636F6E6669672F706C7567696E2F72656665726572.txt</span><br></pre></td></tr></table></figure><p>発見。ファイル名はどうやら16進数でエンコードされたURL(タイトル)らしい。<br>Ruby で適当にデコードしてみた:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/srv/http/wiki/wiki-data/wiki</span><br><span class="line">$ find . -name &quot;*.txt&quot; | xargs -INAME ruby -e &apos;puts [ARGV[0].delete(&quot;./&quot;).delete(&quot;.txt&quot;)].pack(&quot;H*&quot;)&apos; NAME</span><br><span class="line">MenuBar</span><br><span class="line">群桐祭 2015</span><br><span class="line">Ren&apos;Pyで遊ぶ(その2)</span><br><span class="line">Help/Plugin/D</span><br><span class="line">Ziyuu</span><br><span class="line">:config/plugin/attach/mime-type</span><br><span class="line">C勉強会2015</span><br><span class="line">ジャンク祭り 2017</span><br><span class="line">ETロボコン2015</span><br><span class="line">arthur63</span><br><span class="line">メンバー会議 20160121</span><br><span class="line">atpons</span><br><span class="line">UML勉強会2018</span><br><span class="line">FrontPage</span><br><span class="line">IGGG Meetup 2016 Winter</span><br><span class="line">CTFの大会</span><br><span class="line">コアメンバー会議 20150327</span><br><span class="line">ジャンク祭り 20150618</span><br><span class="line">ﾄｷｵﾔﾏｸﾞﾁ</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>謎は解けたので後は固めて scp するだけ:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># これは SSH 先</span><br><span class="line">$ sudo tar czvf wiki-data.tar.gz /srv/http/wiki/wiki-data/wiki</span><br><span class="line">...</span><br><span class="line">$ ls -lah wiki-data.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root 249K  9月 30 18:23 wiki-data.tar.gz</span><br><span class="line"></span><br><span class="line"># これはローカル</span><br><span class="line">$ scp hoge@fuga:/path/to/wiki-data.tar.gz .</span><br><span class="line">$ tar xzvf wiki-data.tar.gz</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="PukiWiki-から-MD-に変換"><a href="#PukiWiki-から-MD-に変換" class="headerlink" title="PukiWiki から MD に変換"></a>PukiWiki から MD に変換</h3><p>魔法の sed 芸した:</p><ul><li><a href="https://qiita.com/yuki-takei/items/152e20f4421333ae8fd9" target="_blank" rel="noopener">PukiWiki の文書を Markdown に変換するワンライナー(一部 crowi-plus 仕様) - Qiita</a></li></ul><p>とはいえいくつか漏れがある:</p><ul><li><code>-hoge</code> みたいな h1 要素があり、スペースが無い</li><li><code>#contents</code> などもともとマジックワードのようなのがある</li><li>画像の形式が変</li><li><code>[[xxx:yyy]]</code> 形式のリンク</li></ul><p>どうしようもないので手動で。。。<br>後、メタっぽいページはいらないので削除した(e.g. <code>Help</code>)。</p><p>後、タイトルを Ruby 芸:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls | grep <span class="string">'.txt'</span> | xargs -IORIG bash -c <span class="string">'ruby -e "puts [ARGV[0].delete(%!.txt!)].pack(%!H*!).gsub(?\s, ?_)" ORIG | xargs -INEW echo mv ORIG NEW.md'</span></span><br></pre></td></tr></table></figure><p>これでも漏れがあるので手動で直す。。。(空白とか)</p><h3 id="MD-内の-wiki-へのリンクを-Scrapbox-に差し替え"><a href="#MD-内の-wiki-へのリンクを-Scrapbox-に差し替え" class="headerlink" title="MD 内の wiki へのリンクを Scrapbox に差し替え"></a>MD 内の wiki へのリンクを Scrapbox に差し替え</h3><p>参照:</p><ul><li><a href="https://scrapbox.io/help-jp/ページをリンクする" target="_blank" rel="noopener">ページをリンクする - Scrapbox ヘルプ</a></li></ul><p>タイトルと同じならこの記法に変換。<br>それ以外は普通のリンクに。</p><p><strong>ほぼ手作業で</strong>。</p><h3 id="画像も-Scrapbox-にいい感じに"><a href="#画像も-Scrapbox-にいい感じに" class="headerlink" title="画像も Scrapbox にいい感じに"></a>画像も Scrapbox にいい感じに</h3><p>まず画像を持ってくる:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd /srv/http/wiki/wiki-data/attach</span><br><span class="line">$ ls | grep -v &apos;.log&apos; | xargs file | grep PNG</span><br><span class="line">32E3818BE38289E5A78BE381BEE3828BE695B4E695B0E58897_696D61676530312E706E67:                                              PNG image data, 225 x 31, 8-bit grayscale, non-interlaced</span><br><span class="line">32E3818BE38289E5A78BE381BEE3828BE695B4E695B0E58897_696D61676530322E706E67:                                              PNG image data, 225 x 31, 8-bit grayscale, non-interlaced</span><br><span class="line">427575_735F646F742E706E67:           PNG image data, 48 x 48, 8-bit/color RGBA, non-interlaced</span><br><span class="line">457863656CE381A7E6A99FE6A2B0E5ADA6E7BF9228E69C80E8BF91E5828DE6B39529E38284E381A3E381A6E381BFE3828B_696D6730312E706E67:  PNG image data, 1462 x 1482, 8-bit/color RGBA, non-interlaced</span><br><span class="line">457863656CE381A7E6A99FE6A2B0E5ADA6E7BF9228E69C80E8BF91E5828DE6B39529E38284E381A3E381A6E381BFE3828B_696D6730322E706E67:  PNG image data, 1456 x 1484, 8-bit/color RGBA, non-interlaced</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>やり方は <code>*.txt</code> と同じ(割愛)。<br>それを同じようにデコード(これは名前を出してみてるだけだけど):</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls | xargs -I&#123;&#125; ruby -e &apos;puts ARGV[0].split(?_).map&#123;|x| [x].pack(&quot;H*&quot;)&#125;.flatten.join(?/)&apos; &#123;&#125;</span><br><span class="line">2から始まる整数列/image01.png</span><br><span class="line">2から始まる整数列/image02.png</span><br><span class="line">Buu/s_dot.png</span><br><span class="line">Excelで機械学習(最近傍法)やってみる/img01.png</span><br><span class="line">Excelで機械学習(最近傍法)やってみる/img02.png</span><br><span class="line">Excelで機械学習(最近傍法)やってみる/img03.png</span><br><span class="line">Excelで機械学習(最近傍法)やってみる/img04.png</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>画像は Scrapbox にインポートできないっぽいので、大した量じゃないし雑なリポジトリを作って雑にあげた:</p><ul><li><a href="https://github.com/IGGG/resources" target="_blank" rel="noopener">IGGG/resources - GitHub</a></li></ul><p>あとは画像のリンクを直すだけ(半ば手作業で)。</p><h3 id="MD-を-Scrapbox-にインポート"><a href="#MD-を-Scrapbox-にインポート" class="headerlink" title="MD を Scrapbox にインポート"></a>MD を Scrapbox にインポート</h3><p>参照:</p><ul><li><a href="https://scrapbox.io/help-jp/ページをインポート・エクスポートする" target="_blank" rel="noopener">ページをインポート・エクスポートする - Scrapbox ヘルプ</a></li></ul><p>MD から Scrapbox にインポートできる形式に変換するには <code>scrapbox-converter</code> という CLI ツールを使う:</p><ul><li><a href="https://github.com/pastak/scrapbox-converter" target="_blank" rel="noopener">pastak/scrapbox-converter - GitHub</a></li></ul><p>ガット変換して、試しにフォーマットして見て変な部分があれば <strong>手作業で</strong> 直してインポート！<br>やったね！</p><h3 id="new-iggg-org-側のリンクを修正"><a href="#new-iggg-org-側のリンクを修正" class="headerlink" title="new.iggg.org 側のリンクを修正"></a>new.iggg.org 側のリンクを修正</h3><p>一括置換してみたが記法にいくつか種類があり、<a href="https://github.com/IGGG/new.iggg.org/commit/43b90c9d1f60460f3792e34bcdfad4f4d8725d86" target="_blank" rel="noopener">半ば手作業</a>(完)</p><h2 id="3-コミットから自動生成"><a href="#3-コミットから自動生成" class="headerlink" title="3. コミットから自動生成"></a>3. コミットから自動生成</h2><p>せっかくなので GitHub Actions を使った。<br>その辺りは前回の記事に書いた:</p><ul><li><a href="https://iggg.github.io/2019/10/11/use-github-actions/">GitHub Actions を使ってみた｜群馬大学電子計算機研究会 IGGG</a></li></ul><h2 id="4-ドメインを-iggg-org-にする"><a href="#4-ドメインを-iggg-org-にする" class="headerlink" title="4. ドメインを iggg.org にする"></a>4. ドメインを iggg.org にする</h2><p>あとはドメインの設定を変えるだけ。<br>リポジトリの Settings で別のカスタムドメインを設定すると勝手に <a href="https://github.com/IGGG/new.iggg.org/commit/c85253722a921fade55422e1b1d20ad1819b370a" target="_blank" rel="noopener"><code>CNAME</code> をプッシュしてくれる</a>。</p><h2 id="おしまい"><a href="#おしまい" class="headerlink" title="おしまい"></a>おしまい</h2><p>無事管理するものを減らせたぜ。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;これの続きです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2018/12/21/replace-iggg-org&quot;&gt;iggg.org を移行する｜群馬大学電子計算機研究会 IGGG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;半年前…やりきりました。&lt;br&gt;実際に &lt;a hr
      
    
    </summary>
    
    
      <category term="Web" scheme="https://iggg.github.io/categories/Web/"/>
    
    
      <category term="GitHub" scheme="https://iggg.github.io/tags/GitHub/"/>
    
      <category term="Hugo" scheme="https://iggg.github.io/tags/Hugo/"/>
    
      <category term="Scrapbox.io" scheme="https://iggg.github.io/tags/Scrapbox-io/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Actions を使ってみた</title>
    <link href="https://iggg.github.io/2019/10/11/use-github-actions/"/>
    <id>https://iggg.github.io/2019/10/11/use-github-actions/</id>
    <published>2019-10-10T15:00:00.000Z</published>
    <updated>2019-12-17T10:56:32.102Z</updated>
    
    <content type="html"><![CDATA[<p>IGGG ソフトウェア基盤部のひげです。<br>GitHub Pages へのデプロイに GitHub Actions を使ってみたので、そのことについて記事を書きます。</p><p>ちなみに <a href="https://github.com/IGGG/new.iggg.org" target="_blank" rel="noopener">IGGG/new.iggg.org</a> と <a href="https://github.com/IGGG/IGGG.github.io" target="_blank" rel="noopener">IGGG/IGGG.github.io</a> に GitHub Actions を使ってみました。</p><h2 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h2><p>GitHub が用意した CI/CD。</p><p><code>.github/workflows</code> 配下に YAML ファイルで設定を置くことができます。<br>まだベータ版な点に注意。</p><ul><li><a href="https://github.com/features/actions" target="_blank" rel="noopener">Features • GitHub Actions · GitHub</a></li></ul><p><img src="/images/use-github-actions/actions.jpg" alt></p><h2 id="設定する"><a href="#設定する" class="headerlink" title="設定する"></a>設定する</h2><p>やりたいことは2つ:</p><ol><li>PR では静的サイトを生成できるか試す</li><li>メインブランチ(<code>master</code>)なら静的サイトをデプロイする(GitHub Pages)</li></ol><p>こんな感じにした:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line"> |- .github</span><br><span class="line"> |  |- workflows</span><br><span class="line"> |  |  |- verify.yml</span><br><span class="line"> |  |  \- deploy.yml</span><br><span class="line"> |  \- scripts</span><br><span class="line"> |     \- deploy.bash</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p>うまく Condition を使って一つの YAML にまとめてもよかったんだけど、めんどくさくなったので分けた。<br>ファイル名から察せれる通り、<code>verify.yml</code> が (1) を <code>deploy.yml</code> が (2) のための設定ファイルだ。</p><h3 id="verify-yml"><a href="#verify-yml" class="headerlink" title="verify.yml"></a>verify.yml</h3><p><code>verify.yml</code> は次の通り:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Verify</span> <span class="string">PR</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">pull_request</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-18.04</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">    - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        fetch-depth:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">        submodules:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Setup</span> <span class="string">Hugo</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">peaceiris/actions-hugo@v2.2.1</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        hugo-version:</span> <span class="string">'0.58.3'</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Build</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">hugo</span> <span class="bullet">--gc</span> <span class="bullet">--cleanDestinationDir</span> <span class="bullet">--minify</span> <span class="bullet">--config</span> <span class="string">config-prod.toml</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">display</span> <span class="string">status</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="attr">docker://buildpack-deps:18.04-scm</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        entrypoint:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">        args:</span> <span class="string">status</span></span><br></pre></td></tr></table></figure><p>(ちなみにこれは IGGG/new.iggg.org の方で、これは Hugo による静的サイト)</p><p><code>on: pull_request</code> と記述することで PR に対してのみ動作します。<br><code>jobs</code> 以下が実際の動作の内容で、各ステップでは状態を共有します。<br><code>uses</code> で GitHub Actions で実行するアクション(リポジトリ)を指定できます(<a href="https://github.com/actions" target="_blank" rel="noopener"><code>actions</code> で始まるものは公式です</a>):</p><ul><li><a href="https://github.com/actions/checkout" target="_blank" rel="noopener">actions/checkout - GitHub</a><ul><li>対象のリポジトリのブランチへクローンしてチェックアウトする</li><li><code>frtch-depth: 1</code> とすることでシャロークローンしてくれます</li><li><code>submodules: true</code> とすることで <code>--recursive</code> オプション付きでクローンしてくれます(Hugo は利用するテーマを submodule として置くことが多い)</li></ul></li><li><a href="https://github.com/peaceiris/actions-hugo" target="_blank" rel="noopener">peaceiris/actions-hugo - GitHub</a><ul><li>Hugo をセットアップする</li><li><code>hugo-version</code> でバージョンを指定できる</li></ul></li></ul><p><code>docker://xxx</code> という指定をすることで、Docker Hub などの Docker イメージのレジストリから直接指定することもできます。<br>で、結局このジョブは、単純に Hugo をビルドしてみてるだけですね。</p><h3 id="deploy-yml"><a href="#deploy-yml" class="headerlink" title="deploy.yml"></a>deploy.yml</h3><p>ここからが鬼門。<br>対象は GitHub Pages なので、デプロイするとはすなわち GitHub にプッシュすることですね。<br>その時に CI 側に権限を与える必要があるのですが、個人的にパーソナルトークンを使うのがいやで、可能ならリポジトリごとに設定できる SSH 鍵を使いたい。</p><p>そのように設定した <code>deploy.yml</code> は次の通り:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    branches:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"docs/**"</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-18.04</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">    - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        fetch-depth:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">        submodules:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Setup</span> <span class="string">Hugo</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">peaceiris/actions-hugo@v2.2.1</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        hugo-version:</span> <span class="string">'0.58.3'</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Build</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">hugo</span> <span class="bullet">--gc</span> <span class="bullet">--cleanDestinationDir</span> <span class="bullet">--minify</span> <span class="bullet">--config</span> <span class="string">config-prod.toml</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="attr">docker://buildpack-deps:18.04-scm</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="attr">        DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        GIT_NAME:</span> <span class="string">Bot</span></span><br><span class="line"><span class="attr">        GIT_EMAIL:</span> <span class="string">example@example.com</span></span><br><span class="line"><span class="attr">        TARGET_BRANCH:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        entrypoint:</span> <span class="string">/bin/bash</span></span><br><span class="line"><span class="attr">        args:</span> <span class="string">.github/scripts/deploy.bash</span></span><br></pre></td></tr></table></figure><p><code>on.push.branches</code> でこのワークフローが動作するブランチを指定しています。<br><code>on.push.paths-ignore: [&quot;docs/**&quot;]</code> とすることで、もし <strong>差分が <code>docs</code> 配下にしかない場合は動作しない</strong> ようにしています。<br>この <code>paths-ignore</code> と <code>**</code> は最近追加された機能で、詳しくは後述します。</p><p><code>jobs</code> の前半は <code>verify.yml</code> と同じです。<br>違うのは <code>name: deploy</code> のステップだけ。<br>これは <code>.github/scripts/deploy.bash</code> を実行しているだけですね。<br>中身を見てます:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -eux</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh agent のセットアップ</span></span><br><span class="line"><span class="comment">## DEPLOY_KEY 環境変数に secret から秘密鍵を与える</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">mkdir -p /root/.ssh</span><br><span class="line">ssh-keyscan -t rsa github.com &gt; /root/.ssh/known_hosts</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;DEPLOY_KEY&#125;</span>"</span> &gt; /root/.ssh/id_rsa</span><br><span class="line">chmod 400 /root/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># コミットするための準備</span></span><br><span class="line"><span class="comment">## GITHUB_REPOSITORY は GitHub Actions が用意してくれてる環境変数</span></span><br><span class="line">git config user.name <span class="string">"<span class="variable">$&#123;GIT_NAME&#125;</span>"</span></span><br><span class="line">git config user.email <span class="string">"<span class="variable">$&#123;GIT_EMAIL&#125;</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin git@github.com:<span class="variable">$&#123;GITHUB_REPOSITORY&#125;</span>.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># docs 配下の差分だけ TARGET_BRANCH にプッシュする</span></span><br><span class="line">git checkout <span class="variable">$&#123;TARGET_BRANCH&#125;</span></span><br><span class="line">git status</span><br><span class="line">git add docs</span><br><span class="line">git diff --staged --quiet || git commit -m <span class="string">"Update docs by GitHub Actions"</span></span><br><span class="line">git push origin <span class="variable">$&#123;TARGET_BRANCH&#125;</span></span><br></pre></td></tr></table></figure><p><code>DEPLOY_KEY</code> で指定する SSH 鍵はリポジトリごとに設定するものを指定しています(その方が権限管理が楽で個人的には好みです)。<br><code>git diff --staged --quiet || git commit -m &quot;...&quot;</code> することで <code>docs</code> 配下に差分があった時にだけコミットを作ります。<br>もし差分がなく、コミットを作らなかった場合は <code>git push</code> は変更がなかったとメッセージを吐いて終了します。<br><code>docs</code> 配下に差分があった時だけプッシュすることで <code>on.push.paths-ignore: [&quot;docs/**&quot;]</code> と組み合わさって、GitHub Actions によるプッシュ(デプロイ)で GitHub Actions が再度動作することは無くなります(残念ながら <code>skip ci</code> のような機能は現状無いので)。<br>さて、これでリポジトリごとの SSH 鍵でデプロイする設定ができました！</p><p>ちなみに、本当は Secret に秘密鍵を直接置くのは嫌なんですけど、、、まぁとりあえず妥協しました。</p><h2 id="躓いたこと-on-push-paths"><a href="#躓いたこと-on-push-paths" class="headerlink" title="躓いたこと: on.push.paths"></a>躓いたこと: on.push.paths</h2><p>公式ドキュメントには当時、以下のようにすれば「<code>docs</code> 配下にのみ差分があったら動作しないようにできる」と書いてありました:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'*'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'!/docs/*'</span></span><br></pre></td></tr></table></figure><p>これではうまくいきません。<br>色々調べた結果、<code>*</code> はディレクトリ階層を掘ってはくれないのです。<br><a href="https://github.community/t5/GitHub-Actions/GitHub-Actions-workflow-not-triggered-with-path/m-p/30321#M400" target="_blank" rel="noopener">これ</a>を読む限り、これはどうやら Go のモジュールの仕様らしいですね。<br>もし <code>*.md</code> の差分だけ動作して欲しい場合は:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'*.md'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'*/*.md'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'*/*/*.md'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'*/*/*/*.md'</span></span><br></pre></td></tr></table></figure><p>みたいなアホな設定をする必要がありました。<br>「ベータだなぁ〜」って思ってた矢先、なんと神アップデートがありました:</p><ul><li><a href="https://github.blog/changelog/2019-09-30-github-actions-event-filtering-updates" target="_blank" rel="noopener">GitHub Actions – event filtering updates</a></li></ul><p><code>**</code> でディレクトリ階層を吸収してくれるのです。<br>つまり、<code>**/*.md</code> と書けば任意の深さのマークダウンの差分を検知してくれます。<br>また、<code>paths-ignore</code> は <code>!</code> を省くことができる機能ですね。</p><h2 id="おしまい"><a href="#おしまい" class="headerlink" title="おしまい"></a>おしまい</h2><p>GitHub Actions を初めて使ってみましたが、結構満足してます(<code>paths</code> の修正のおかげで)。<br>あとはキャッシュぐらいかな。<br>それと、同じ GitHub 内だし GitHub Actions 用の SSH 鍵を設定する機能を公式が用意して欲しい。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IGGG ソフトウェア基盤部のひげです。&lt;br&gt;GitHub Pages へのデプロイに GitHub Actions を使ってみたので、そのことについて記事を書きます。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;a href=&quot;https://github.com/IGGG/new.ig
      
    
    </summary>
    
    
      <category term="Web" scheme="https://iggg.github.io/categories/Web/"/>
    
    
      <category term="GitHub" scheme="https://iggg.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>libnss-json 始めました</title>
    <link href="https://iggg.github.io/2019/09/25/libnss-json/"/>
    <id>https://iggg.github.io/2019/09/25/libnss-json/</id>
    <published>2019-09-24T15:00:00.000Z</published>
    <updated>2019-12-17T10:56:32.102Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。IGGG 何もしない部の<a href="https://www.iggg.org/wiki/?atpons" target="_blank" rel="noopener">atpons</a>です。みなさんはサークルのサーバのユーザ管理、どうしていますか？</p><p>われわれのサークルは、そこまで規模が大きくないため、サーバの数は少なく、一台のみVPSをレンタルしています。</p><p>なので、これまでは手作業でユーザの追加を行ったり、時にはLDAPを用いてユーザを管理していました。しかし、年々メンテナンスをしていくユーザが卒業していき、LDAPなどを全て停止していました。</p><p>正しく設定が変更されてLDAPとかが抜けていればいいのですが、実際<code>pam.d</code>以下をちゃんとみて<code>sssd</code>(サークルではSSSDを利用していました)を削除するのがつらく、あるあるなsudo遅い問題（解決しにいくため）などが多発していました。</p><h2 id="libnss-jsonを知る"><a href="#libnss-jsonを知る" class="headerlink" title="libnss-jsonを知る"></a>libnss-jsonを知る</h2><p>先日行われた<a href="https://techbookfest.org/" target="_blank" rel="noopener">技術書典7</a>に参加し、<a href="https://trap.jp" target="_blank" rel="noopener">東工大デジタル創作同好会traP</a>のSysAd班が出している「<a href="https://techbookfest.org/event/tbf07/circle/5091367973814272" target="_blank" rel="noopener">traP SysAd TechBook</a>」を買って色々と読んでいたところ、libnss-jsonというのがあると言うことを知りました。</p><h3 id="libnssとは"><a href="#libnssとは" class="headerlink" title="libnssとは"></a>libnssとは</h3><p>Linux(*nixにもあるらしい)にはName Service Switch(NSS)と呼ばれる、<code>/etc/passwd</code>などをファイルからどこから読むのかを管理する機構があります。これにLDAPなどを読みに行くようなものを書けば、<code>getent</code>をした際にそこに読みに行きます、というワケです。これらは、NSSサービスとして書くことができます。</p><h2 id="libnss-jsonを使う"><a href="#libnss-jsonを使う" class="headerlink" title="libnss-jsonを使う"></a>libnss-jsonを使う</h2><p>これをJSONファイルで定義して、なおかつリモートから読み込んでくれるようなNSSサービスが、<a href="https://github.com/Aklakan/libnss-json" target="_blank" rel="noopener">libnss-json</a>です。導入方法などは上で挙げたtraPの本がとても参考になりました。</p><p>実際に導入する際には、導入用のAnsible Playbookを用意したり、Vagrantでしっかりと動作確認できるようにしました。既存のサーバで適用する前に、さまざまなケースを試し、問題ないことを確認した上でデプロイしました。</p><p>traPの本では、traPがフォークした<a href="https://github.com/traPtitech/nss" target="_blank" rel="noopener">このリポジトリ</a>を使って紹介されていました。</p><h2 id="SSHも便利に使う"><a href="#SSHも便利に使う" class="headerlink" title="SSHも便利に使う"></a>SSHも便利に使う</h2><p>traPの本では、OpenSSHの設定で<code>AuthorizedKeysCommand</code>を上手く使って、上のJSONで定義したユーザ名を使ってGitHubの公開鍵と組み合わせていました。われわれのサークルもこの方式を採用させていただきました。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Name Service Switchのバックエンドをいろんなモノに差し替えるという発想は、最近だと<a href="https://stns.jp/" target="_blank" rel="noopener">STNS</a>が有名だと思います。ただ、大学のサークル、しかも小規模となると、あまりメンテナンス性とか（抜けることが少ない）、階層性についてこだわりたくないなと思っていました。実際、プロビジョニングツールを書いたりはしていたのですが…。</p><p>しかし、このlibnss-jsonでかなり<strong>Lightweight</strong>に管理できて個人的にはとても満足しています。</p><p>このlibnss-jsonを自動で展開するAnsible Playbookも書いたので、これで将来サーバが増えても簡単に管理できると思います！</p><p>さいごに、有益な情報を書いてくださったtraPのみなさまには感謝しかないです！<br>ありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。IGGG 何もしない部の&lt;a href=&quot;https://www.iggg.org/wiki/?atpons&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;atpons&lt;/a&gt;です。みなさんはサークルのサーバのユーザ管理、どうしていますか？&lt;/
      
    
    </summary>
    
    
      <category term="Infra" scheme="https://iggg.github.io/categories/Infra/"/>
    
    
      <category term="libnss-json" scheme="https://iggg.github.io/tags/libnss-json/"/>
    
      <category term="Linux" scheme="https://iggg.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>esaの利用をはじめました</title>
    <link href="https://iggg.github.io/2018/12/24/esa-io/"/>
    <id>https://iggg.github.io/2018/12/24/esa-io/</id>
    <published>2018-12-23T15:00:00.000Z</published>
    <updated>2019-12-17T10:56:32.102Z</updated>
    
    <content type="html"><![CDATA[<p>本記事は<a href="http://www.adventar.org/calendars/3217" target="_blank" rel="noopener">IGGG アドベントカレンダー 2018</a> 24日目の記事です。</p><p>群馬大学電子計算機研究会 IGGGでは，2018年の2月頃から情報共有の場として<a href="https://esa.io/" target="_blank" rel="noopener">esa</a>を利用させていただいています．</p><h2 id="esaとは"><a href="#esaとは" class="headerlink" title="esaとは"></a>esaとは</h2><p><strong>esaは「情報を育てる」という視点で作られた、自律的なチームのための情報共有サービス</strong>（<a href="https://esa.io/" target="_blank" rel="noopener">esa公式ページ</a>より）です．詳しくは公式ページをみていただくとして，とりあえずMarkdownで書けて便利です．</p><h2 id="なぜesaか"><a href="#なぜesaか" class="headerlink" title="なぜesaか"></a>なぜesaか</h2><p>IGGGでは，以前から<a href="https://www.iggg.org/wiki/" target="_blank" rel="noopener">PukiWiki</a>が情報共有の場として利用されてきました．これは，外部向けにも閲覧可能であることから，情報発信等には向いていましたが，内部で持っておきたい情報（引き継ぎ・会計等）についてはここには書けない状況になっていました．</p><p>先日公開された記事中でも，IGGGがGitHubのissueやWikiをベースとして運営の情報を管理しているということが挙がっていましたが，GitHubを普段利用しないメンバーにとってはなかなか見づらい・使いづらいということが頻繁に起こっていました．</p><p>サーバ管理等のコストなどもあり，より良いものに移行していきたい，引き継ぎがうまく出来るようにしたいというところで，esaの存在を知りました．</p><h2 id="アカデミックプランの存在"><a href="#アカデミックプランの存在" class="headerlink" title="アカデミックプランの存在"></a>アカデミックプランの存在</h2><p>esaには<a href="https://docs.esa.io/posts/129" target="_blank" rel="noopener">アカデミックプラン</a>が存在しており(2018/12現在)，条件を満たしていれば一定期間無償（再申請可能）で利用することが可能です．</p><p>そこで，申請を行い，現在無償で利用させて頂いています．</p><h2 id="esaの使いどころ"><a href="#esaの使いどころ" class="headerlink" title="esaの使いどころ"></a>esaの使いどころ</h2><p>個人的には，以下のように使い分けて行っています．</p><ul><li>esa<ul><li>議事録</li><li>会計</li><li>周知事項など</li></ul></li><li>PukiWiki<ul><li>イベント/メンバ向け</li></ul></li><li>GitHub Wiki<ul><li>引き継ぎ資料など（esaに移行したいかも？）</li></ul></li></ul><p>誰が見たか，記事へのコメント，WIP機能は今までの他のツールにはなく，とても使い勝手が良いです．</p><p>副産物として，群馬大学では学内でG Suiteが利用されており，群馬大学のアカウントでログインできるのも，使いやすくて便利です．</p><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>メンバのみなさんには，もっとesaを使って色々書いて行ってみて欲しいです．部内Wikiですから，誰もちょっかい出さないと思うので(笑)，あとバージョニングもあるので戻せますよ！</p><p>そろそろ引き継ぎを考える時期になりました．esaをはじめとしたツールを使いこなして，スムーズに引き継ぎが出来るようにがんばります！</p><p>最後に，申請を承認していただいたesaのみなさまにはこの場を借りて感謝申し上げます．</p><p>記事中の <a href="https://docs.esa.io/posts/79" target="_blank" rel="noopener">esa アイコン</a>は <a rel="noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank">クリエイティブ・コモンズ 表示 - 非営利 - 改変禁止 4.0 国際 ライセンス</a>の下に提供されています。© esa LLC</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本記事は&lt;a href=&quot;http://www.adventar.org/calendars/3217&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IGGG アドベントカレンダー 2018&lt;/a&gt; 24日目の記事です。&lt;/p&gt;
&lt;p&gt;群馬大学電子計算機研
      
    
    </summary>
    
    
      <category term="Service" scheme="https://iggg.github.io/categories/Service/"/>
    
    
      <category term="esa" scheme="https://iggg.github.io/tags/esa/"/>
    
  </entry>
  
</feed>
